Geffe_stream : [52] -> [53] -> [55] -> [inf]
Geffe_stream R1 R2 R3 = (R1s && R2s) ^ (R2s && R3s) ^ (R1s && R3s)
  where
    (R1s, R1f) = lfsrki 1 R1
    (R2s, R2f) = lfsrki 2 R2
    (R3s, R3f) = lfsrki 3 R3


type N = 250
Geffe : ([52], [53], [55]) -> [N]
Geffe (reg1, reg2, reg3) = keystream
  where
    keystream =  take`{N} (Geffe_stream reg1 reg2 reg3)

lfsrki_step : {d} (fin d, d >=1) => [4] -> [d] -> [d]
lfsrki_step num fill = fill'
  where
    feedback_bit = if num == 1 then (fill!0) ^ (fill@48) //regA[48]^regA[51];
                    | num == 2 then (fill!0) ^ (fill@36) ^ (fill@37) ^ (fill@51) //regB[36]^regB[37]^regB[51]^regB[52];
                    | num == 3 then (fill!0) ^ (fill@30)  //regC[30]^regC[54];
                    else False  
    fill' = [feedback_bit]#(take fill)


lfsrki : {d} (fin d, d >=1) => [4] -> [d] -> ([inf], [inf][d])
lfsrki reg_num init = (stream, fills)
  where
    stream = [ f!0 | f <- fills ]
    lfsrki' = lfsrki_step reg_num
    fills = [init] # [ lfsrki' f | f <- fills]

prefix f xs = ys!0
  where ys = [xs@0] # [ f y x | y <- ys | x <- tail xs ]


